1. Сериализация и дессериализация
Сериализация - запись объекта в поток (байтов).
Дессериализация - чтение объекта из потока. По сути восстанавливает ранее сериализованные
объекты в их исходное состояние.
2. Какая последовательность работы с потоком?
2.1. Открытие потока для чтения из файла, записи в файл и т.п.
2.2. Чтение / запись.
2.3. Закрытие потока для освобождения ресурсов и предотвращения утечки памяти.
2.4. Обработка ошибок. Необходимо учитывать появление возможных ошибок,
обычно используется IOException
3. Какие виды потоков существуют?
Потоки ввода вывода - Streams, которые в свою очередь разделяются на потоки
для побайтового чтения и посимвольного
Многопоточность (Thread - класс, Runnable - интерфейс)
Потоки для работы с файлами (File Streams)
Потоки консоли (System.in, System.out, System.err)
Потоки для работы с ZIP архивами: ZipInputStream, ZipOutputStream
4. Чем отличается IO от NIO?
Java IO является потокоориентированным, JAVA NIO буфер-ориентированным.
То есть в Java IO операции чтения / записи осуществляются поочередно.
В Java NIO используется считывание / запись в буфер
